BFS in Graph.......................................



#include <bits/stdc++.h> 

// To create adjacency list...
void prepareAdjList(unordered_map<int, set<int>>& adjList,vector<pair<int, int>> &edges)
{
    for(int i = 0 ; i< edges.size(); i++)
    {
        int u = edges[i].first;
        int v = edges[i].second;

        adjList[u].insert(v);
        adjList[v].insert(u);
    }
}


// To traverse using  BFS Technique... 
void bfs(unordered_map<int, set<int>> &adjList,unordered_map<int, bool>& visited,vector<int>& ans, int node )
{
    queue<int> q;
    q.push(node);
    visited[node] = 1;
    while(!q.empty())
    {
        int frontNode = q.front();
        q.pop();

        // Push frontNode to ans(store)
        ans.push_back(frontNode);


        // To traverse all neighbours of frontNode
        for(auto i : adjList[frontNode])
        {
            if(!visited[i])
            {
                q.push(i);
                visited[i] = 1;
            }
        }
    }
}

vector<int> BFS(int vertex, vector<pair<int, int>> edges)
{
    unordered_map<int, set<int>> adjList;  // for adjacency list
    vector<int> ans;
    unordered_map<int, bool> visited;  // To track the recond of visited or not...
    prepareAdjList(adjList, edges);


    // for all node either connected or disconnected components...
    for(int i = 0 ;i< vertex; i++)
    {
        if(!visited[i])
        {
            bfs(adjList, visited, ans, i);
        }
    }

    return ans;
}
