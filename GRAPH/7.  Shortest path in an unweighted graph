# Shortest path in an unweighted graph...(Using  BFS) ............



#include<unordered_map>
#include<list>
#include<vector>
#include<algorithm>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	// create adjacency list...
	unordered_map<int, list<int> > adj;
	for(int i= 0 ;i <m; i++)
	{
		int u = edges[i].first;
		int v = edges[i].second;

		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	// do BFS
	unordered_map<int, bool> visited;
	unordered_map<int, int> parent;
	queue<int> q;
	q.push(s);
	parent[s] = -1;
	visited[s] = true;
	while(!q.empty())
	{
		int front = q.front();
		q.pop();

		// visit neighbour node
		for(auto neighbour : adj[front])
		{
			if(!visited[neighbour])
			{
				visited[neighbour] = true;
				parent[neighbour] = front;
				q.push(neighbour);
			}
		}
	}

	// prepare shortest path
	vector<int> ans;
	int currentNode = t;
	ans.push_back(t);
	while(currentNode != s)
	{
		currentNode = parent[currentNode];
		ans.push_back(currentNode);
	}

	reverse(ans.begin(), ans.end());
	return ans;

}
	

