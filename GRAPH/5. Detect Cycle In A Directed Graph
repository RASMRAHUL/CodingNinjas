APPROACH 1..(Using DFS)................

5.   Detect Cycle In A Directed Graph ...............(using DFS)


#include<unordered_map>
#include<list>
bool checkCycleDFS(int node,unordered_map<int, bool>& visited ,unordered_map<int, bool>&dfsvisited, unordered_map<int, list<int>>& adj)
{
  visited[node] = true;
  dfsvisited[node] = true;
  for(auto neighbour : adj[node])
  {
    if(!visited[neighbour])
    {
      bool cycleDetected = checkCycleDFS(neighbour, visited, dfsvisited, adj);
      if(cycleDetected)
        return true;
    }
    else if(dfsvisited[neighbour])
      return true;

  }

  dfsvisited[node] = false;
  return false;

}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  
  unordered_map<int, list<int>> adj;

  // creating adjacency list
  for(int i= 0 ; i< edges.size(); i++)
  {
    int u = edges[i].first;
    int v = edges[i].second;

    adj[u].push_back(v);
  }

  // call dfs for  all components
  unordered_map<int, bool> visited;
  unordered_map<int, bool> dfsvisited;

  for(int i = 0 ; i< n ;i++)
  {
    if(!visited[i])
    {
      bool cycleFound = checkCycleDFS(i, visited, dfsvisited, adj);
      if(cycleFound)
        return true;

    }
  }

  return false;

}

// *********************************************************************************************************************************


APPROACH 2......(Using BFS).....................(Kahn's Algorithm)................

  #include<bits/stdc++.h>
  int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {  
    unordered_map<int, list<int>> adj;
   
    for(int i = 0 ;i< edges.size(); i++)
    {
       int u = edges[i].first - 1;
       int v = edges[i].second -1;

      adj[u].push_back(v); 
    }

    // find all indegree..
    vector<int> indegree(n);
    for(auto i : adj)
    {
       for(auto j : i.second)
       {
           indegree[j]++;
       }
    }


    // 0 indegree walo ko push kar do queue me
    queue<int> q;
    for(int i =0 ;i<n; i++)
    {
       if(indegree[i] == 0)
            q.push(i);
    }

    // do BFS
    int count = 0;
    
    while(!q.empty())
    {
        int front = q.front();
        q.pop();
        
        count++;

        // neighbour indegree ko update karo
        for(auto neighbour : adj[front])
        {
            indegree[neighbour]--;
            if(indegree[neighbour] == 0)
                q.push(neighbour);
        }
    }
    if(count == n)
      return false;
    else
      return true;
  }



